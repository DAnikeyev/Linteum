services:
  db:
    image: postgres:16
    container_name: ${DB_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_HOST_PORT}:${DB_CONTAINER_PORT}"
    networks:
      - linteum_dev
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build:
      context: .
      dockerfile: Linteum.Api/Dockerfile
    container_name: ${API_CONTAINER_NAME}
    ports:
      - "${API_HOST_PORT}:${API_CONTAINER_PORT}"
    environment:
      - ConnectionStrings__DefaultConnection=Host=${DB_CONTAINER_NAME};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - MASTER_PASSWORD=${MASTER_PASSWORD}
      - MASTER_USER=${MASTER_USER}
      - MASTER_EMAIL=${MASTER_EMAIL}
      - PASSWORD_SALT=${PASSWORD_SALT}
      - ASPNETCORE_URLS=http://*:${API_CONTAINER_PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - linteum_dev
    pull_policy: build

  blazor:
    build:
      context: .
      dockerfile: Linteum.BlazorApp/Dockerfile
    container_name: ${BLAZOR_CONTAINER_NAME}
    environment:
      - PASSWORD_SALT=${PASSWORD_SALT}
      - API_CONTAINER_NAME=${API_CONTAINER_NAME}
      - API_CONTAINER_PORT=${API_CONTAINER_PORT}
      - ASPNETCORE_URLS=http://*:${BLAZOR_CONTAINER_PORT}
    ports:
      - "${BLAZOR_HOST_PORT}:${BLAZOR_CONTAINER_PORT}"
    depends_on:
      - api
    networks:
      - linteum_dev
    pull_policy: build
    volumes:
      - "./keys:/app/keys"

networks:
  linteum_dev:
    driver: bridge

volumes:
  db_data: