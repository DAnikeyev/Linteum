@page "/settings"
@using Linteum.BlazorApp.Components.Layout
@using Linteum.BlazorApp.Components.Notification
@layout Layout.BaseLayout
@inject LocalStorageService LocalStorageService
@inject NavigationManager Navigation
@inject MyApiClient ApiClient
@inject ILogger<SettingsPage> Logger
@inject NotificationService NotificationService

<div class="settings-container">
    <h2>Settings</h2>

    <!-- Email (read-only) -->
    <div class="mb-4">
        <label for="emailInput" class="form-label">Email</label>
        <div class="input-group fixed-width">
            <input id="emailInput" class="form-control" value="@_email" disabled />
            <span class="input-group-text email-lock-bg"><i class="bi bi-lock-fill"></i></span>
        </div>
        <small class="text-muted">Email address cannot be changed.</small>
    </div>

    <!-- Username -->
    <div class="mb-4">
        <label for="usernameInput" class="form-label">Username (4-32 characters)</label>
        <div class="d-flex align-items-center gap-2">
            <input id="usernameInput" class="form-control fixed-width me-2" @bind="_userName" autocomplete="off"/>
            <button class="btn btn-primary" @onclick="SaveUsername">Update Username</button>
        </div>
    </div>

    <!-- New Password -->
    <div class="mb-3">
        <label for="passwordInput" class="form-label">New Password (4-32 characters)</label>
        <input type="password" id="passwordInput" class="form-control fixed-width" @bind="_password" autocomplete="off"/>
    </div>

    <!-- Confirm New Password and Update Button -->
    <div class="mb-4">
        <label for="confirmPasswordInput" class="form-label">Confirm New Password</label>
        <div class="d-flex align-items-center gap-2">
            <input type="password" id="confirmPasswordInput" class="form-control fixed-width me-2" @bind="_confirmPassword" />
            <button class="btn btn-primary" @onclick="SavePassword" disabled="@(!CanSavePassword())">Update Password</button>
        </div>
    </div>

    <!-- Logout -->
    <div class="mt-4 d-flex align-items-center gap-2">
        <button class="btn btn-danger" @onclick="Logout">Logout</button>
    </div>
</div>

@code {
    [CascadingParameter]
    private CanvasSidebar? Sidebar { get; set; }
    private string? _email;
    private string? _userName;
    private string? _originalUserName;
    private string? _password;
    private string? _confirmPassword;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _userName = await LocalStorageService.GetItemAsync<string>(LocalStorageKey.UserName);
            _originalUserName = _userName;
            _email = await LocalStorageService.GetItemAsync<string>(LocalStorageKey.Email);
            StateHasChanged();
        }
    }

    private async Task SaveUsername()
    {
        if (ValidateUsername())
        {
            try
            {
                await ApiClient.ChangeUsernameAsync(_userName);
                await LocalStorageService.SetItemAsync(LocalStorageKey.UserName, _userName);
                _originalUserName = _userName;
                await NotificationService.NotifyAsync(new CustomNotification
                {
                    Message = $"Username updated successfully to {_userName}.",
                    Type = NotificationType.Success
                });
                if(Sidebar != null)
                {
                    await Sidebar.RefreshCanvases();
                }
            }
            catch (Exception ex)
            {
                var error = $"Error updating username: {ex.Message}";
                await NotificationService.NotifyAsync(new CustomNotification
                {
                    Message = error,
                    Type = NotificationType.Error,
                });
            }
        }
        StateHasChanged();
    }

    private async Task SavePassword()
    {
        if (ValidatePassword())
        {
            try
            {
                await ApiClient.ChangePasswordAsync(_password);
                await NotificationService.NotifyAsync(new CustomNotification
                {
                    Message = "Password updated successfully.",
                    Type = NotificationType.Success
                });
                _password = null;
                _confirmPassword = null;
            }
            catch (Exception ex)
            {
                var error = $"Error updating password: {ex.Message}";
                _ = NotificationService.NotifyAsync(new CustomNotification
                {
                    Message = error,
                    Type = NotificationType.Error,
                });
            }
        }
        StateHasChanged();
    }

    private bool ValidateUsername()
    {
        if (string.IsNullOrWhiteSpace(_userName))
        {
            var error = "Username cannot be empty.";
            _ = NotificationService.NotifyAsync(new CustomNotification
            {
                Message = error,
                Type = NotificationType.Error,
            });
            return false;
        }
        else if (_userName.Length < 4 || _userName.Length > 32)
        {
            var error = "Username must be between 4 and 32 characters.";
            _ = NotificationService.NotifyAsync(new CustomNotification
            {
                Message = error,
                Type = NotificationType.Error,
            });
            return false;
        }
        return true;
    }

    private bool ValidatePassword()
    {
        bool isValid = true;
        var error = string.Empty;
        if (string.IsNullOrWhiteSpace(_password))
        {
            error = "Password cannot be empty.";
            isValid = false;
        }
        else if (_password.Length < 4 || _password.Length > 32)
        {
            error = "Password must be between 4 and 32 characters.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(_confirmPassword))
        {
            error = "Please confirm your password.";
            isValid = false;
        }
        else if (_password != _confirmPassword)
        {
            error = "Passwords do not match.";
            isValid = false;
        }
        if (!isValid)
        {
            _ = NotificationService.NotifyAsync(new CustomNotification
            {
                Message = error,
                Type = NotificationType.Error,
            });
        }
        return isValid;
    }

    private bool CanSavePassword()
    {
        return !string.IsNullOrWhiteSpace(_password) && !string.IsNullOrWhiteSpace(_confirmPassword);
    }

    private async Task Logout()
    {
        await LocalStorageService.ClearAsync();
        Navigation.NavigateTo("/login", true);
    }
}