@page "/"
@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer
@using Linteum.BlazorApp.Components.Layout
@using Linteum.Shared
@inject NavigationManager Navigation
@inject MyApiClient ApiClient
@inject Config Config
@inject LocalStorageService LocalStorageService
@inject ILogger<Login> Logger

<div class="background">
    <div class="login-container">
        <h3>Login</h3>
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="alert alert-danger">@_error</div>
        }
        <EditForm Model="_loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="_loginModel.Email"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText class="form-control" @bind-Value="_loginModel.Password" type="password"/>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-primary flex-fill" type="submit">Login</button>
                <button class="btn btn-outline-primary flex-fill" type="button" @onclick="GoogleLogin">Login with Google</button>
            </div>
        </EditForm>
        <p>
            Don't have an account? <a href="/signup">Sign up</a>
        </p>
    </div>
</div>

@code {
    private LoginModel _loginModel = new();
    private string? _error;

    private async Task HandleLogin()
    {
        Logger.LogInformation("Login attempt for {Email}", _loginModel.Email);
        var (user, sessionId) = await ApiClient.LoginAsync(_loginModel.Email, _loginModel.Password);
        if (user != null)
        {
            Logger.LogInformation("Login successful for {Email}", _loginModel.Email);
            Navigation.NavigateTo("/colors");
        }
        else
        {
            Logger.LogWarning("Login failed for {Email}", _loginModel.Email);
            _error = "Invalid login credentials.";
        }
    }

    private void GoogleLogin()
    {
        Navigation.NavigateTo("/auth/google", true);
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var sessionId = await LocalStorageService.GetItemAsync<string>(LocalStorageKey.SessionId);
                var createdAt = await LocalStorageService.GetItemAsync<DateTime?>(LocalStorageKey.SessionCreatedAt);
                var expiresAt = createdAt + TimeSpan.FromMinutes(Config.ExpiredSessionTimeoutMinutes);
                if (createdAt == null || DateTime.UtcNow > expiresAt)
                {
                    Logger.LogInformation("Session expired, clearing local storage.");
                    await LocalStorageService.ClearAsync();
                }

                if (sessionId != null)
                {
                    Logger.LogInformation("Session ID found, redirecting to home page.");
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    Logger.LogInformation("No session ID found, staying on login page.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error checking session validity on login page.");
                await LocalStorageService.ClearAsync();
            }
        }
    }
}